function parse(tokens) {
  let insideTag = false;
  let children = [];
  let cursor = 0;
  let voidElement = false;
  let type = "";
  let name = "";
  let closingName = "";
  let cursorStart = 0;
  let cursorFinish = 0;
  let childrenTokens = [];

  console.log(tokens.join(""));

  if (tokens[0] !== "<")
    return [
      {
        type: "text",
        name: tokens.join(""),
        voidElement: false,
        children: []
      }
    ];

  while (cursor < tokens.length) {
    const t = tokens[cursor];
    if (t === "<") {
      insideTag = true;
      type = "tag";
    }

    if (insideTag && t !== "<" && t !== ">") name += t;

    if (t === "/" && tokens[cursor + 1] === ">") voidElement = true;

    if (t === ">") {
      insideTag = false;
      name = name.trim().replace("/", "");
      cursorStart = cursor + 1;
      break;
    }

    cursor++;
  }

  while (cursor < tokens.length && voidElement === false) {
    const t = tokens[cursor];
    if (t === "<" && tokens[cursor + 1] === "/") {
      insideTag = true;
      cursorFinish = cursor;
    }

    if (t !== "<" && t !== ">") closingName += t;

    if (t == ">") {
      insideTag = false;
      closingName = closingName.trim().replace("/", "");

      if (name === closingName) {
        console.log(name, closingName);
        break;
      } else
        closingName = "";
    }

    cursor++;
  }

  const node = {
    type,
    name,
    voidElement,
    children: voidElement
      ? []
      : parse(tokens.join("").slice(cursorStart, cursorFinish).trim().split(""))
  };

  return node;
}

function cleaner(tokens) {
  return tokens.split("").filter(t => t !== "\n").join("");
}

function parser(html) {
  const cleanHtml = cleaner(html);
  return parse(cleanHtml.split(""));
}

module.exports = parser;
